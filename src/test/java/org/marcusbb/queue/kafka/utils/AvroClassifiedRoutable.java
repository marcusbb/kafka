/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.marcusbb.queue.kafka.utils;

import org.apache.avro.specific.SpecificData;
/**
 * 
 * Potentially remove this in favour of compile time source generation.
 * See maven avro plugin.
 *
 */
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AvroClassifiedRoutable extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7013537962328438681L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AvroClassifiedRoutable\",\"namespace\":\"org.marcusbb.queue.kafka.utils\",\"fields\":[{\"name\":\"ts\",\"type\":\"long\",\"default\":-1},{\"name\":\"version\",\"type\":\"string\",\"default\":\"1.0.0\"},{\"name\":\"headers\",\"type\":{\"type\":\"map\",\"values\":\"string\"},\"default\":\"null\"},{\"name\":\"public\",\"type\":{\"type\":\"map\",\"values\":\"string\"},\"default\":\"null\"},{\"name\":\"private\",\"type\":{\"type\":\"map\",\"values\":\"bytes\"},\"default\":\"null\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public long ts;
  @Deprecated public java.lang.CharSequence version;
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> headers;
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> public$;
  @Deprecated public java.util.Map<java.lang.CharSequence,java.nio.ByteBuffer> private$;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AvroClassifiedRoutable() {}

  /**
   * All-args constructor.
   * @param ts The new value for ts
   * @param version The new value for version
   * @param headers The new value for headers
   * @param public$ The new value for public
   * @param private$ The new value for private
   */
  public AvroClassifiedRoutable(java.lang.Long ts, java.lang.CharSequence version, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> headers, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> public$, java.util.Map<java.lang.CharSequence,java.nio.ByteBuffer> private$) {
    this.ts = ts;
    this.version = version;
    this.headers = headers;
    this.public$ = public$;
    this.private$ = private$;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return ts;
    case 1: return version;
    case 2: return headers;
    case 3: return public$;
    case 4: return private$;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: ts = (java.lang.Long)value$; break;
    case 1: version = (java.lang.CharSequence)value$; break;
    case 2: headers = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    case 3: public$ = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    case 4: private$ = (java.util.Map<java.lang.CharSequence,java.nio.ByteBuffer>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'ts' field.
   * @return The value of the 'ts' field.
   */
  public java.lang.Long getTs() {
    return ts;
  }

  /**
   * Sets the value of the 'ts' field.
   * @param value the value to set.
   */
  public void setTs(java.lang.Long value) {
    this.ts = value;
  }

  /**
   * Gets the value of the 'version' field.
   * @return The value of the 'version' field.
   */
  public java.lang.CharSequence getVersion() {
    return version;
  }

  /**
   * Sets the value of the 'version' field.
   * @param value the value to set.
   */
  public void setVersion(java.lang.CharSequence value) {
    this.version = value;
  }

  /**
   * Gets the value of the 'headers' field.
   * @return The value of the 'headers' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getHeaders() {
    return headers;
  }

  /**
   * Sets the value of the 'headers' field.
   * @param value the value to set.
   */
  public void setHeaders(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.headers = value;
  }

  /**
   * Gets the value of the 'public$' field.
   * @return The value of the 'public$' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getPublic$() {
    return public$;
  }

  /**
   * Sets the value of the 'public$' field.
   * @param value the value to set.
   */
  public void setPublic$(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.public$ = value;
  }

  /**
   * Gets the value of the 'private$' field.
   * @return The value of the 'private$' field.
   */
  public java.util.Map<java.lang.CharSequence,java.nio.ByteBuffer> getPrivate$() {
    return private$;
  }

  /**
   * Sets the value of the 'private$' field.
   * @param value the value to set.
   */
  public void setPrivate$(java.util.Map<java.lang.CharSequence,java.nio.ByteBuffer> value) {
    this.private$ = value;
  }

  /**
   * Creates a new AvroClassifiedRoutable RecordBuilder.
   * @return A new AvroClassifiedRoutable RecordBuilder
   */
  public static AvroClassifiedRoutable.Builder newBuilder() {
    return new AvroClassifiedRoutable.Builder();
  }

  /**
   * Creates a new AvroClassifiedRoutable RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AvroClassifiedRoutable RecordBuilder
   */
  public static AvroClassifiedRoutable.Builder newBuilder(AvroClassifiedRoutable.Builder other) {
    return new AvroClassifiedRoutable.Builder(other);
  }

  /**
   * Creates a new AvroClassifiedRoutable RecordBuilder by copying an existing AvroClassifiedRoutable instance.
   * @param other The existing instance to copy.
   * @return A new AvroClassifiedRoutable RecordBuilder
   */
  public static AvroClassifiedRoutable.Builder newBuilder(AvroClassifiedRoutable other) {
    return new AvroClassifiedRoutable.Builder(other);
  }

  /**
   * RecordBuilder for AvroClassifiedRoutable instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AvroClassifiedRoutable>
    implements org.apache.avro.data.RecordBuilder<AvroClassifiedRoutable> {

    private long ts;
    private java.lang.CharSequence version;
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> headers;
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> public$;
    private java.util.Map<java.lang.CharSequence,java.nio.ByteBuffer> private$;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(AvroClassifiedRoutable.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.ts)) {
        this.ts = data().deepCopy(fields()[0].schema(), other.ts);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.version)) {
        this.version = data().deepCopy(fields()[1].schema(), other.version);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.headers)) {
        this.headers = data().deepCopy(fields()[2].schema(), other.headers);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.public$)) {
        this.public$ = data().deepCopy(fields()[3].schema(), other.public$);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.private$)) {
        this.private$ = data().deepCopy(fields()[4].schema(), other.private$);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing AvroClassifiedRoutable instance
     * @param other The existing instance to copy.
     */
    private Builder(AvroClassifiedRoutable other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.ts)) {
        this.ts = data().deepCopy(fields()[0].schema(), other.ts);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.version)) {
        this.version = data().deepCopy(fields()[1].schema(), other.version);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.headers)) {
        this.headers = data().deepCopy(fields()[2].schema(), other.headers);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.public$)) {
        this.public$ = data().deepCopy(fields()[3].schema(), other.public$);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.private$)) {
        this.private$ = data().deepCopy(fields()[4].schema(), other.private$);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'ts' field.
      * @return The value.
      */
    public java.lang.Long getTs() {
      return ts;
    }

    /**
      * Sets the value of the 'ts' field.
      * @param value The value of 'ts'.
      * @return This builder.
      */
    public AvroClassifiedRoutable.Builder setTs(long value) {
      validate(fields()[0], value);
      this.ts = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'ts' field has been set.
      * @return True if the 'ts' field has been set, false otherwise.
      */
    public boolean hasTs() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'ts' field.
      * @return This builder.
      */
    public AvroClassifiedRoutable.Builder clearTs() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'version' field.
      * @return The value.
      */
    public java.lang.CharSequence getVersion() {
      return version;
    }

    /**
      * Sets the value of the 'version' field.
      * @param value The value of 'version'.
      * @return This builder.
      */
    public AvroClassifiedRoutable.Builder setVersion(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.version = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'version' field has been set.
      * @return True if the 'version' field has been set, false otherwise.
      */
    public boolean hasVersion() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'version' field.
      * @return This builder.
      */
    public AvroClassifiedRoutable.Builder clearVersion() {
      version = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'headers' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getHeaders() {
      return headers;
    }

    /**
      * Sets the value of the 'headers' field.
      * @param value The value of 'headers'.
      * @return This builder.
      */
    public AvroClassifiedRoutable.Builder setHeaders(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[2], value);
      this.headers = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'headers' field has been set.
      * @return True if the 'headers' field has been set, false otherwise.
      */
    public boolean hasHeaders() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'headers' field.
      * @return This builder.
      */
    public AvroClassifiedRoutable.Builder clearHeaders() {
      headers = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'public$' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getPublic$() {
      return public$;
    }

    /**
      * Sets the value of the 'public$' field.
      * @param value The value of 'public$'.
      * @return This builder.
      */
    public AvroClassifiedRoutable.Builder setPublic$(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[3], value);
      this.public$ = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'public$' field has been set.
      * @return True if the 'public$' field has been set, false otherwise.
      */
    public boolean hasPublic$() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'public$' field.
      * @return This builder.
      */
    public AvroClassifiedRoutable.Builder clearPublic$() {
      public$ = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'private$' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.nio.ByteBuffer> getPrivate$() {
      return private$;
    }

    /**
      * Sets the value of the 'private$' field.
      * @param value The value of 'private$'.
      * @return This builder.
      */
    public AvroClassifiedRoutable.Builder setPrivate$(java.util.Map<java.lang.CharSequence,java.nio.ByteBuffer> value) {
      validate(fields()[4], value);
      this.private$ = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'private$' field has been set.
      * @return True if the 'private$' field has been set, false otherwise.
      */
    public boolean hasPrivate$() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'private$' field.
      * @return This builder.
      */
    public AvroClassifiedRoutable.Builder clearPrivate$() {
      private$ = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public AvroClassifiedRoutable build() {
      try {
        AvroClassifiedRoutable record = new AvroClassifiedRoutable();
        record.ts = fieldSetFlags()[0] ? this.ts : (java.lang.Long) defaultValue(fields()[0]);
        record.version = fieldSetFlags()[1] ? this.version : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.headers = fieldSetFlags()[2] ? this.headers : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[2]);
        record.public$ = fieldSetFlags()[3] ? this.public$ : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[3]);
        record.private$ = fieldSetFlags()[4] ? this.private$ : (java.util.Map<java.lang.CharSequence,java.nio.ByteBuffer>) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
